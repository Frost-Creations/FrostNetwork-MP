name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v5.32.1-pfs.1)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@2.34.1
        with:
          php-version: '8.1'
          extensions: chunkutils2, crypto, ctype, curl, date, gmp, hash, igbinary, json, leveldb, mbstring, morton, openssl, pcre, phar, pmmpthread, reflection, simplexml, sockets, spl, yaml, zip, zlib
          ini-values: phar.readonly=0
          coverage: none

      - name: Setup Composer authentication
        run: |
          composer config github-oauth.github.com ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          composer update --no-interaction --prefer-dist --ignore-platform-reqs --no-dev

      - name: Configure for release build
        run: |
          echo "Configuring VersionInfo.php for release build..."
          # Set IS_DEVELOPMENT_BUILD to false for release (keep BUILD_CHANNEL as dev)
          sed -i 's/public const IS_DEVELOPMENT_BUILD = true;/public const IS_DEVELOPMENT_BUILD = false;/' src/VersionInfo.php
          
          echo "Verifying changes:"
          grep -n "IS_DEVELOPMENT_BUILD\|BUILD_CHANNEL" src/VersionInfo.php


      - name: Build PHAR
        run: |
          echo "Building release PHAR..."
          composer make-server
          # Output is now FrostNetwork.phar by default

      - name: Verify PHAR was created
        run: |
          echo "Listing files in workspace before PHAR check:"
          ls -la
          if [ ! -f "FrostNetwork.phar" ]; then
            echo "Error: FrostNetwork.phar was not created"
            exit 1
          fi
          echo "PHAR file created successfully"
          ls -la FrostNetwork.phar
          
          # Verify it's a release build by checking the version info
          echo "Verifying release build configuration..."
          php -dphar.readonly=0 -r "
            \$phar = new Phar('FrostNetwork.phar');
            \$content = \$phar['src/VersionInfo.php']->getContent();
            \$lines = explode(PHP_EOL, \$content);
            foreach(\$lines as \$line) {
              if(strpos(\$line, 'IS_DEVELOPMENT_BUILD') !== false || 
                 strpos(\$line, 'BUILD_CHANNEL') !== false || 
                 strpos(\$line, 'BASE_VERSION') !== false ||
                 strpos(\$line, 'NAME') !== false) {
                echo trim(\$line) . PHP_EOL;
              }
            }
          "

      - name: Get tag name
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        id: changelog
        run: |
          TAG_NAME="${{ steps.tag.outputs.tag }}"
          echo "Generating changelog for $TAG_NAME"
          
          # Create changelog content
          cat > release_notes.md << 'EOF'
          ## FrostNetwork-MP Release ${{ steps.tag.outputs.tag }}
          
          ### 🚀 Features
          - **1.21.100**: add 1.21.100 version support
          - **Enhanced Error Handling**: Improved plugin error reporting and recovery
          - **CI-Friendly Loading**: Intelligent plugin loading for development and production
          - **Resource Pack Encryption**: Built-in support for encrypted resource packs
          - **Resource Pack Tools**: Command-line utilities for pack management
          - **Pack Key Management**: Automatic key handling and verification
          - **Cross-Platform Pack Support**: Compatible with WaterDog and PowerNukkitX encrypted packs
          
          ### 🛠️ Improvements
          - Removed PMMP communications (auto-updater, statistics, reporting)
          - Optimized for Windows development environments
          - Built-in FolderPluginLoader for seamless development workflow
          - Enhanced crash dump system with Discord integration
          - Advanced resource pack management and encryption tools
          - Improved resource pack loading and validation
          - Secure key storage and management
          - Command-line utilities for pack operations
          
          ### 📦 This Release
          - **Build Type**: Stable Release (Production Ready)
          - **Based on**: PocketMine-MP 5.0.1
          - **Channel**: Dev
          - **Development Build**: No
          
          ### 📋 Installation & Tools
          
          #### Quick Start
          ```bash
          # Download the PHAR file
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/FrostNetwork.phar
          
          # Resource Pack Encryption (Optional)
          php tools/encrypt-pack.php resource_packs/my-pack.zip resource_packs/encrypted-pack.zip
          
          # Make it executable (Linux/Mac)
          chmod +x FrostNetwork.phar
          
          # Run the server
          php FrostNetwork.phar
          ```
          
          #### Windows Installation
          ```cmd
          # Download and run
          php FrostNetwork.phar
          ```
          
          
          ### ⚠️ Notes
          - This is a **stable release** suitable for production servers
          - Compatible with PocketMine-MP plugins (API 5.0.0)
          - Requires PHP 8.1+ with PocketMine extensions
          - Resource pack encryption requires OpenSSL extension
          - Compatible with encrypted packs from WaterDog and PowerNukkitX
          - Pack encryption tools available in tools/ directory
          
          EOF
          
          echo "Changelog generated successfully"

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Creating release ${{ steps.tag.outputs.tag }}"
          gh release create "${{ steps.tag.outputs.tag }}" \
            --title "FrostNetwork ${{ steps.tag.outputs.tag }}" \
            --notes-file "release_notes.md" \
            "./FrostNetwork.phar#FrostNetwork.phar"

          echo "Release created successfully!"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }}"